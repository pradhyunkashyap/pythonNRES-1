{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ex1. Write a Python function that takes a list of words and returns the length of the longest one.\n",
    "def get_longest_word(word_list):\n",
    "    max_len = 0\n",
    "    for word in word_list:\n",
    "        if len(word) > max_len:\n",
    "            max_len = len(word)\n",
    "            result = word\n",
    "            \n",
    "    return max_len, result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "get_longest_word(['hello', 'classroom', 'UNL'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ex2. Write a Python program to count the number of characters in a string.\n",
    "def count_char(string):\n",
    "    return len(set(list(string)))\n",
    "\n",
    "count_char('aaabbbccef')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'key4': 2, 'key3': 3, 'key2': 5}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ex3. Write a Python program to sort (ascending and descending) a dictionary by value.\n",
    "\n",
    "def sort_dict_value(dictionary):\n",
    "    # construct a new dict of inverse keys and values\n",
    "    inverse_dict = dict()\n",
    "    for k in dictionary:\n",
    "        inverse_dict[dictionary[k]] = k\n",
    "    \n",
    "    dictionary_values = list(dictionary.values())\n",
    "    dictionary_values.sort()\n",
    "    \n",
    "    sorted_dict = dict()\n",
    "    for v in dictionary_values:\n",
    "        sorted_dict[inverse_dict[v]] = v\n",
    "\n",
    "    return sorted_dict\n",
    "\n",
    "sort_dict_value({'key1': 2, 'key2': 5, 'key3': 3, 'key4': 2})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'key1': 2, 'key4': 2, 'key3': 3, 'key2': 5}\n"
     ]
    }
   ],
   "source": [
    "def sort_dict_duplicate_value(dictionary):\n",
    "    \n",
    "    keys = list(dictionary.keys())\n",
    "    sorted_keys = [keys[0]]\n",
    "    \n",
    "    for k in keys[1:]:\n",
    "        v = dictionary[k]\n",
    "        for i, sk in enumerate(sorted_keys.copy()):\n",
    "            sv = dictionary[sk]\n",
    "            inserted = False\n",
    "            if v < sv and not inserted:\n",
    "                sorted_keys.insert(i, k)\n",
    "                inserted = True\n",
    "            elif i == len(sorted_keys) - 1 and v >= sv:\n",
    "                sorted_keys.append(k)\n",
    "    \n",
    "    sorted_dict = dict()            \n",
    "    for k in sorted_keys:\n",
    "        sorted_dict[k] = dictionary[k]\n",
    "\n",
    "    return sorted_dict\n",
    "\n",
    "sort_dict_duplicate_value({'key1': 2, 'key2': 5, 'key3': 3, 'key4': 2})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.16 µs ± 7.38 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n",
      "2.44 µs ± 28.1 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit sort_dict_value({'key1': 2, 'key2': 5, 'key3': 3, 'key4': 2})\n",
    "%timeit sort_dict_duplicate_value({'key1': 2, 'key2': 5, 'key3': 3, 'key4': 2})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'U believe I'"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ex4. Write a Python program to change a given string to a new string where the first and last chars have been exchanged.\n",
    "def exhange_string_first_and_last(string):\n",
    "    return string[-1] + string[1:-1] + string[0]\n",
    "\n",
    "exhange_string_first_and_last('I believe U')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ex5. Write a Python function that takes two lists and returns True if they have at least one common member.\n",
    "def common_item(list1, list2):\n",
    "    result = False\n",
    "    for l1 in list1:\n",
    "        for l2 in list2:\n",
    "            if l1 == l2:\n",
    "                result = True\n",
    "                break\n",
    "    return result\n",
    "common_item([2, 3, 4], [7, 2, 9])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 0, 3]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ex6. Write a Python function that return the minimum number of coins ($0.01, $0.1, $0.25, $1) that make a given value.\n",
    "def coin_changes(val):\n",
    "    # convert to cent unit\n",
    "    coins = [100, 25, 10, 1]\n",
    "    val = int(val * 100)\n",
    "    coins_number = []\n",
    "    for c in coins:\n",
    "        n = val // c\n",
    "        coins_number.append(n)\n",
    "        val -= n * c\n",
    "    return coins_number\n",
    "coin_changes(1.53)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
